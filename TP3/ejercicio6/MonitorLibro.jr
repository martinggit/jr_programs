/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// MonitorLibro.m, line 1: _monitor MonitorLibro {

class MonitorLibro {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public MonitorLibro(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// MonitorLibro.m, line 2:   // Inicializar variables locales


// MonitorLibro.m, line 3:   private int lectores = 0;

private
int
lectores
=0;
// MonitorLibro.m, line 4:   private int escritores = 0;

private
int
escritores
=0;
// MonitorLibro.m, line 5:   private int escritoresEsperando=0;

private
int
escritoresEsperando
=0;
// MonitorLibro.m, line 6: 


// MonitorLibro.m, line 7:   // Recurso compartido


// MonitorLibro.m, line 8:   private String [] textos = {"Texto escrito 0", "Texto escrito 1", "Texto escrito 2", "Texto escrito 3"};

private
String
[]textos
={"Texto escrito 0","Texto escrito 1","Texto escrito 2","Texto escrito 3"};
// MonitorLibro.m, line 9:   private String texto = textos[0];

private
String
texto
=textos
[0];
// MonitorLibro.m, line 10: 


// MonitorLibro.m, line 11:   // Variables de condición


// MonitorLibro.m, line 12:   _condvar okParaLeer;


// MonitorLibro.m, line 13:   _condvar okParaEscribir;

private m_condvar okParaLeer = new m_condvar("okParaLeer");

// MonitorLibro.m, line 14: 


// MonitorLibro.m, line 15:   // Procedimientos


// MonitorLibro.m, line 16:   _proc String solicitarLectura(){

private m_condvar okParaEscribir = new m_condvar("okParaEscribir");
public
String
solicitarLectura
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorLibro.m, line 17:     while (escritores > 0 || escritoresEsperando > 0) {

while
(escritores
>0||escritoresEsperando
>0){
// MonitorLibro.m, line 18:       _wait(okParaLeer);

{  m_condvar m_cv = (okParaLeer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// MonitorLibro.m, line 19:     }


// MonitorLibro.m, line 20:     lectores += 1;

}lectores
+=1;
// MonitorLibro.m, line 21:     _return texto;

{ if (true) {
  m_next();
  return 
texto

// MonitorLibro.m, line 22:   }

;
}}

// MonitorLibro.m, line 23: 


// MonitorLibro.m, line 24:   _proc void liberarLectura(){

  m_next();
throw new RuntimeException("reached end of non-void _proc (MonitorLibro.m, line 24) without executing a return");
}
public
void
liberarLectura
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorLibro.m, line 25:     lectores -= 1;

lectores
-=1;
// MonitorLibro.m, line 26:     if (lectores == 0){

if
(lectores
==0){
// MonitorLibro.m, line 27:       _signal(okParaEscribir);//Doy paso a escritores si no hay más lectores

{ if ((okParaEscribir ).m_signal()) {
  P(m_mutex);
}}

// MonitorLibro.m, line 28:     }


// MonitorLibro.m, line 29:   }

}
// MonitorLibro.m, line 30: 


// MonitorLibro.m, line 31:   _proc void solicitarEscritura(int escritor){

  m_next();
}
public
void
solicitarEscritura
(int
escritor
){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorLibro.m, line 32:     escritoresEsperando++;

escritoresEsperando
++;
// MonitorLibro.m, line 33:     while (escritores> 0 || lectores > 0){

while
(escritores
>0||lectores
>0){
// MonitorLibro.m, line 34:       System.out.println("El Escritor " + escritor + " espera '");

System
.out
.println
("El Escritor "+escritor
+" espera '");
// MonitorLibro.m, line 35:       _wait(okParaEscribir);

{  m_condvar m_cv = (okParaEscribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// MonitorLibro.m, line 36:     }


// MonitorLibro.m, line 37:     escritoresEsperando--;

}escritoresEsperando
--;
// MonitorLibro.m, line 38:     texto = textos[escritor];

texto
=textos
[escritor
];
// MonitorLibro.m, line 39:     escritores += 1;

escritores
+=1;
// MonitorLibro.m, line 40:     System.out.println("El Escritor " + escritor + " escribe: '" + texto + "'.");

System
.out
.println
("El Escritor "+escritor
+" escribe: '"+texto
+"'.");
// MonitorLibro.m, line 41:   }


// MonitorLibro.m, line 42: 


// MonitorLibro.m, line 43:   _proc void liberarEscritura(){

  m_next();
}
public
void
liberarEscritura
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorLibro.m, line 44:     escritores -= 1;

escritores
-=1;
// MonitorLibro.m, line 45:     if (!_empty(okParaEscribir)){

if
(!(okParaEscribir ).m_empty()
){
// MonitorLibro.m, line 46:       _signal(okParaEscribir);//Priorizar a otro escritor

{ if ((okParaEscribir ).m_signal()) {
  P(m_mutex);
}}

// MonitorLibro.m, line 47:     } else {

}else
{
// MonitorLibro.m, line 48:       _signal_all(okParaLeer);//Si no hay escritores esperando, liberar lectores

(okParaLeer ).m_signal_all();

// MonitorLibro.m, line 49:     }


// MonitorLibro.m, line 50:   }

}
// MonitorLibro.m, line 51: 


// MonitorLibro.m, line 52: }
  m_next();
}
}
