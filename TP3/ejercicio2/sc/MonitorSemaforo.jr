/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */
// MonitorSemaforo.m, line 1: // Definir el monitor
// MonitorSemaforo.m, line 2: _monitor MonitorSemaforo {

class MonitorSemaforo {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public MonitorSemaforo(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }
// MonitorSemaforo.m, line 3:   // Inicializar variable local (simulando el contador del sem치foro)
// MonitorSemaforo.m, line 4:   private static int valor = 1;
private static int valor =1;
// MonitorSemaforo.m, line 5: 
// MonitorSemaforo.m, line 6:   // Definir variable de condici칩n
// MonitorSemaforo.m, line 7:   _condvar recurso;
// MonitorSemaforo.m, line 8: 
// MonitorSemaforo.m, line 9:   // Simular el wait del sem치foro
// MonitorSemaforo.m, line 10:   _proc void semWait(){
private m_condvar recurso = new m_condvar("recurso");
public void semWait (){
    op void m_return_from_wait();
    P(m_mutex);
// MonitorSemaforo.m, line 11:     while(valor == 0) {
while (valor==0){
// MonitorSemaforo.m, line 12:       _wait(recurso);
{  m_condvar m_cv = (recurso );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// MonitorSemaforo.m, line 13:     }
// MonitorSemaforo.m, line 14:     valor -= 1;
}valor-=1;
// MonitorSemaforo.m, line 15:   }
// MonitorSemaforo.m, line 16: 
// MonitorSemaforo.m, line 17:   // Simular el signal del sem치foro
// MonitorSemaforo.m, line 18:   _proc void semSignal(){
  m_next();
}
public void semSignal (){
    op void m_return_from_wait();
    P(m_mutex);
// MonitorSemaforo.m, line 19:     valor += 1;
valor
+=1;
// MonitorSemaforo.m, line 20:     _signal(recurso);
(recurso ).m_signal();
// MonitorSemaforo.m, line 21:   }
// MonitorSemaforo.m, line 22: }
  m_next();}
}
