/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// MonitorPuente.m, line 1: /*


// MonitorPuente.m, line 2: En la ciudad de Ushuaia, existe un puente de un solo carril que une la ciudad de norte a sur. Durante las


// MonitorPuente.m, line 3:  horas pico, cruzar el puente se vuelve complicado debido a la gran cantidad de autos esperando en ambos


// MonitorPuente.m, line 4:  lados. El cruce se realiza mediante turnos: en cada turno, una cantidad N de vehiculos puede cruzar el


// MonitorPuente.m, line 5:  puente en un solo sentido. Si en un lado no hay autos, se deja via libre para el lado que si tiene vehiculos.


// MonitorPuente.m, line 6:  Usted debera simular un sistema con monitores que asegure que los vehiculos en direcciones contrarias


// MonitorPuente.m, line 7:  no crucen el puente simultaneamente y que gestione el cruce de a lo sumo N vehiculos. Especifique los


// MonitorPuente.m, line 8:  supuestos que asuma.


// MonitorPuente.m, line 9:  */


// MonitorPuente.m, line 10: 


// MonitorPuente.m, line 11: /*


// MonitorPuente.m, line 12: Objetivo del sistema:


// MonitorPuente.m, line 13: Simular un puente de un solo carril con las siguientes restricciones:


// MonitorPuente.m, line 14: Capacidad maxima de cruce simultaneo: como maximo N vehículos por turno.


// MonitorPuente.m, line 15: Sentido exclusivo: los vehículos solo pueden cruzar en una dirección a la vez.


// MonitorPuente.m, line 16: Acceso alternado: cuando terminan de cruzar los vehículos de un lado (o si no hay más vehículos de ese lado), se cede el paso al otro lado si tiene vehículos esperando.


// MonitorPuente.m, line 17: Evitar inanición (opcional): si un lado siempre tiene autos, no debe bloquear indefinidamente al otro.


// MonitorPuente.m, line 18: */


// MonitorPuente.m, line 19: _monitor MonitorPuente {

class MonitorPuente {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public MonitorPuente(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// MonitorPuente.m, line 20:     int esperandoNorte = 0;

int
esperandoNorte
=0;
// MonitorPuente.m, line 21:     int esperandoSur = 0;

int
esperandoSur
=0;
// MonitorPuente.m, line 22:     int cruzando = 0;

int
cruzando
=0;
// MonitorPuente.m, line 23:     int cantidadEnTurno =0;

int
cantidadEnTurno
=0;
// MonitorPuente.m, line 24:     String direccionActual = "norte";

String
direccionActual
="norte";
// MonitorPuente.m, line 25:     int N;

int
N
;
// MonitorPuente.m, line 26: 


// MonitorPuente.m, line 27:     _condvar puedeCruzarNorte;


// MonitorPuente.m, line 28:     _condvar puedeCruzarSur;

private m_condvar puedeCruzarNorte = new m_condvar("puedeCruzarNorte");

// MonitorPuente.m, line 29: 


// MonitorPuente.m, line 30:     _proc void llegarNorte(){

private m_condvar puedeCruzarSur = new m_condvar("puedeCruzarSur");
public
void
llegarNorte
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorPuente.m, line 31:         esperandoNorte++;

esperandoNorte
++;
// MonitorPuente.m, line 32:         while (direccionActual != "norte" || cruzando >= N){

while
(direccionActual
!="norte"||cruzando
>=N
){
// MonitorPuente.m, line 33:             _wait(puedeCruzarNorte);

{  m_condvar m_cv = (puedeCruzarNorte );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// MonitorPuente.m, line 34:         }


// MonitorPuente.m, line 35:         esperandoNorte--;

}esperandoNorte
--;
// MonitorPuente.m, line 36:         cruzando++;

cruzando
++;
// MonitorPuente.m, line 37:         cantidadEnTurno++;

cantidadEnTurno
++;
// MonitorPuente.m, line 38:     }


// MonitorPuente.m, line 39:     


// MonitorPuente.m, line 40:     _proc void salirNorte(){

  m_next();
}
public
void
salirNorte
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorPuente.m, line 41:         cruzando--;

cruzando
--;
// MonitorPuente.m, line 42:         if (cruzando == 0 && (cantidadEnTurno >= N || esperandoNorte == 0) && esperandoSur > 0){

if
(cruzando
==0&&(cantidadEnTurno
>=N
||esperandoNorte
==0)&&esperandoSur
>0){
// MonitorPuente.m, line 43:             direccionActual="sur";

direccionActual
="sur";
// MonitorPuente.m, line 44:             cantidadEnTurno=0;

cantidadEnTurno
=0;
// MonitorPuente.m, line 45:             _signal_all(puedeCruzarSur);

(puedeCruzarSur ).m_signal_all();

// MonitorPuente.m, line 46:         } else {

}else
{
// MonitorPuente.m, line 47:             _signal(puedeCruzarNorte);

(puedeCruzarNorte ).m_signal();

// MonitorPuente.m, line 48:         }


// MonitorPuente.m, line 49:     }

}
// MonitorPuente.m, line 50:     


// MonitorPuente.m, line 51:     _proc void llegarSur() {

  m_next();
}
public
void
llegarSur
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorPuente.m, line 52:     esperandoSur++;

esperandoSur
++;
// MonitorPuente.m, line 53:     while (direccionActual != "sur" || cruzando >= N) {

while
(direccionActual
!="sur"||cruzando
>=N
){
// MonitorPuente.m, line 54:       _wait(puedeCruzarSur);

{  m_condvar m_cv = (puedeCruzarSur );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// MonitorPuente.m, line 55:     }


// MonitorPuente.m, line 56:     esperandoSur--;

}esperandoSur
--;
// MonitorPuente.m, line 57:     cruzando++;

cruzando
++;
// MonitorPuente.m, line 58:     cantidadEnTurno++;

cantidadEnTurno
++;
// MonitorPuente.m, line 59:     }


// MonitorPuente.m, line 60: 


// MonitorPuente.m, line 61:   _proc void salirSur() {

  m_next();
}
public
void
salirSur
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorPuente.m, line 62:     cruzando--;

cruzando
--;
// MonitorPuente.m, line 63:     if (cruzando == 0 && (cantidadEnTurno >= N || esperandoSur == 0) && esperandoNorte > 0) {

if
(cruzando
==0&&(cantidadEnTurno
>=N
||esperandoSur
==0)&&esperandoNorte
>0){
// MonitorPuente.m, line 64:       direccionActual = "norte";

direccionActual
="norte";
// MonitorPuente.m, line 65:       cantidadEnTurno = 0;

cantidadEnTurno
=0;
// MonitorPuente.m, line 66:       _signal_all(puedeCruzarNorte);

(puedeCruzarNorte ).m_signal_all();

// MonitorPuente.m, line 67:     } else {

}else
{
// MonitorPuente.m, line 68:       _signal(puedeCruzarSur);

(puedeCruzarSur ).m_signal();

// MonitorPuente.m, line 69:     }


// MonitorPuente.m, line 70:   }

}
// MonitorPuente.m, line 71: 


// MonitorPuente.m, line 72: }
  m_next();
}
}
